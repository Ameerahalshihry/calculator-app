{"version":3,"sources":["reportWebVitals.js","index.js","App.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","App","document","getElementById","updateCal","value","setState","cal","state","handleAllClear","handleClearLast","slice","handlePercent","eval","toString","handleOperation","ops","handleResult","className","this","id","onClick","Component"],"mappings":"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","file":"static/js/main.4f16dcd2.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import './App.css';\nimport React, {Component} from 'react'\n\nclass App extends Component  {\n  constructor(){\n    super()\n    this.state= {cal:''}\n  }\n  updateCal = (value)=> {\n    this.setState({cal:this.state.cal+value})\n  }\n  handleAllClear = ()=>{\n    this.setState({cal:''})\n  }\n  handleClearLast=()=>{\n    if(this.state.cal !== ''){\n      this.setState({cal:this.state.cal.slice(0,-1)})\n    }\n  }\n  handlePercent = () =>{\n    this.setState({cal :eval(this.state.cal / 100).toString()})\n  }\n  handleOperation =(ops)=>{\n    this.setState({cal: this.state.cal+ops})\n  }\n  handleResult =() =>{\n    this.setState({cal: eval(this.state.cal).toString()})\n  }\n  render(){\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <div className=\"calculator\">\n          <h1>Simple Calculator</h1>\n            <div className=\"row\">\n            <div className=\"display col-4 border bg-dark text-white rounded\">\n              {this.state.cal || 0}\n            </div>\n            </div>\n            <div className=\"row\">\n              <button className=\"col-1 border bg-secondary rounded\" id=\"AC\" onClick={this.handleAllClear}>AC</button>\n              <button className=\"col-1 border bg-secondary rounded\" id=\"C\" onClick={this.handleClearLast}>C</button>\n              <button className=\"col-1 border bg-secondary rounded\" id=\"percent\" onClick={this.handlePercent}>%</button>\n              <button className=\"col-1 border bg-warning rounded\" id=\"divide\" onClick={()=>this.handleOperation('/')}>/</button>\n            </div>\n            <div className=\"row\">\n              <button className=\"col-1 border bg-light rounded\" id=\"num7\" onClick={()=> this.updateCal(7)}>7</button>\n              <button className=\"col-1 border bg-light rounded\" id=\"num8\" onClick={()=> this.updateCal(8)}>8</button>\n              <button className=\"col-1 border bg-light rounded\" id=\"num9\" onClick={()=> this.updateCal(9)}>9</button>\n              <button className=\"col-1 border bg-warning rounded\" id=\"multiple\" onClick={()=>this.handleOperation('*')}>X</button>\n            </div>\n            <div className=\"row\">\n              <button className=\"col-1 border bg-light rounded\" id=\"num4\" onClick={()=> this.updateCal(4)}>4</button>\n              <button className=\"col-1 border bg-light rounded\" id=\"num5\" onClick={()=> this.updateCal(5)}>5</button>\n              <button className=\"col-1 border bg-light rounded\" id=\"num6\" onClick={()=> this.updateCal(6)}>6</button>\n              <button className=\"col-1 border bg-warning rounded\" id=\"minus\" onClick={()=>this.handleOperation('-')}>-</button>\n            </div>\n            <div className=\"row\">\n              <button className=\"col-1 border bg-light rounded\" id=\"num1\" onClick={()=> this.updateCal(1)}>1</button>\n              <button className=\"col-1 border bg-light rounded\" id=\"num2\" onClick={()=> this.updateCal(2)}>2</button>\n              <button className=\"col-1 border bg-light rounded\" id=\"num3\" onClick={()=> this.updateCal(3)}>3</button>\n              <button className=\"col-1 border bg-warning rounded\" id=\"plus\" onClick={()=>this.handleOperation('+')}>+</button>\n            </div>\n            <div className=\"row\">\n              <button className=\"col-2 border bg-light rounded\" id=\"num0\" onClick={()=> this.updateCal(0)}>0</button>\n              <button className=\"col-1 border bg-light rounded\" id=\"point\" onClick={()=> this.updateCal(\".\")}>.</button>\n              <button className=\"col-1 border bg-warning rounded\" id=\"result\" onClick={this.handleResult}>=</button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"],"sourceRoot":""}